

document.addEventListener("DOMContentLoaded", () => {
    applyStaticTranslations(); // ุชุทุจูู ุงูุชุฑุฌูุฉ ุนูุฏ ุชุญููู ุงูุตูุญุฉ
});




let currentLanguage = localStorage.getItem("language") || "ar"; // ุงููุบุฉ ุงูุงูุชุฑุงุถูุฉ
const translations = {
    ar: {
        app_title: "ุชุทุจูู ูุงุฏู ุงูููุงู",
        change_language_ar: "ุนุฑุจู",
        change_language_en: "ุฅูุฌููุฒู",
        menu_toggle: "โฐ",
       hilal_info: "ูุนูููุงุช ุงูููุงู",
        support: "ุงูุฏุนู",
        championships: "ุงูุชุชููุฌุงุช",
        competitions: "ุงููุณุงุจูุงุช",
        team_matches: "ุงูููุงุฌูุงุช",
        team_players: "ุงููุฑูู ุงูุฃูู",
        year_stats: "ุญุณููุงุช ุงูุฏูุฑู",
        managers: "ุฑุคุณุงุก ุงููุงุฏู",
        youtube_videos: "ููุงุทุน ุงูุชุชููุฌ",
        hilal_map: "ููุตุงุช ุงูููุงู",
        world_cup: "ูุฃุณ ุงูุนุงูู",
        privacy_policy: "ุณูุงุณุฉ ุงูุฎุตูุตูุฉ",
        about_us: "ูู ูุญู",
        support_notes: "ููุงุญุธุงุช ุงูุฏุนู",
       app_title: "ุชุทุจูู ุญุงูู ุงูุฐูู",
       welcome_message: "ูุฑุญุจูุง ุจู ูู ุชุทุจูููุง!",
        welcome_description: "ุงุณุชูุชุน ุจุงููุนูููุงุช ูุงูุจูุงูุงุช ุงูุญุตุฑูุฉ ุญูู ุชุงุฑูุฎ ูุฅูุฌุงุฒุงุช ูุงุฏู ุงูููุงู.",
        timer_message: "ุณูุชู ุชุณุฌูู ุฎุฑูุฌู ุจุนุฏ 10 ุซูุงูู...",
       register_title: "ุดุงุดุฉ ุชุณุฌูู ุงูุฏุฎูู",
        user_name_label: "ุงุณู ุงููุณุชุฎุฏู",
        user_name_placeholder: "ุงุณู ุงููุณุชุฎุฏู",
        user_name_error: "ุงูุฑุฌุงุก ุฅุฏุฎุงู ุงุณู ูุณุชุฎุฏู ุตุญูุญ.",
        user_email_label: "ุงูุจุฑูุฏ ุงูุฅููุชุฑููู",
        user_email_placeholder: "example@example.com",
        user_email_error: "ุงูุฑุฌุงุก ุฅุฏุฎุงู ุจุฑูุฏ ุฅููุชุฑููู ุตุญูุญ.",
        register_button: "ุชุณุฌูู",
        twitter: "ุชููุชุฑ",
        youtube: "ููุชููุจ",
        telegram: "ุชูููุฌุฑุงู",
        select_year_label: "ุงุฎุชุฑ ุงูุณูุฉ",
        match_number: "ุฑูู ุงููุจุงุฑุงุฉ",
        year: "ุงูุณูุฉ",
        round: "ุงูุฏูุฑ",
        team1: "ุงูููุงู",
        team2: "ุงูููุงูุณ",
        result: "ุงููุชูุฌุฉ",  year_stats: "๐ ุญุณููุงุช ุงูุฏูุฑู",
        select_year_label: "ุงุฎุชุฑ ุงูุณูุฉ",
        all: "ุงููู",
        wins: "ุงูุงูุชุตุงุฑุงุช",
        losses: "ุงูุฎุณุงุฆุฑ",
        draws: "ุงูุชุนุงุฏูุงุช",
        match_number: "ุฑูู ุงููุจุงุฑุงุฉ",
        managers_title: "ุฑุคุณุงุก ุงููุงุฏู",
        manager_image: "ุตูุฑุฉ ุงููุฏูุฑ",
        prev: "ุงูุณุงุจู",
        next: "ุงูุชุงูู",
        no_data: "ูุง ุชูุฌุฏ ุจูุงูุงุช ูุชุงุญุฉ ููุฑุคุณุงุก",
        no_wins: "ูุง ุชูุฌุฏ ุจุทููุงุช",
        period: "ุงููุชุฑุฉ ุงูุฒูููุฉ",
        trophies: "ุงูุจุทููุงุช",
        stats: "ุงูุฅุญุตุงุฆูุงุช",
        total_years: "ุฅุฌูุงูู ุงูุณููุงุช",
        total_trophies: "ุฅุฌูุงูู ุงูุจุทููุงุช",
             years: "ุณูุฉ",
 youtube_videos: "ููุงุทุน ุงูุชุชููุฌ",
        previous: "ุงูุณุงุจู",
        next: "ุงูุชุงูู",
        page: "ุงูุตูุญุฉ",
        of: "ูู",
        video_title_not_available: "ุนููุงู ุบูุฑ ูุชููุฑ",
        winner: "ุงููุงุฆุฒ",
       world_cup: "ูุฃุณ ุงูุนุงูู",
        world_cup_details: "ุชูุงุตูู ูุฃุณ ุงูุนุงูู",
        back_to_world_cup: "ุงูุนูุฏุฉ ููุฃุณ ุงูุนุงูู",
        view_details: "ุนุฑุถ ุงูุชูุงุตูู",
        opponent: "ุงููุฑูู ุงูููุงูุณ",
        date: "ุงูุชุงุฑูุฎ",
        stadium: "ุงูููุนุจ",
        captain: "ุงููุงุจุชู",
        result: "ุงููุชูุฌุฉ",
        championship: "ุงูุจุทููุฉ",
      loading: "ุฌุงุฑู ุชุญููู ุงูุจูุงูุงุช...",
        telegram_link: "ุงุดุชุฑู ูู ููุงุฉ ุชูููุฌุฑุงู ููุญุตูู ุนูู ูู ุฌุฏูุฏ",
        last_match: "ุขุฎุฑ ูุจุงุฑุงุฉ",
        no_matches: "ูุง ุชูุฌุฏ ูุจุงุฑูุงุช ูุณุฌูุฉ",
        this_month_events: "ุจุทููุงุช ูุฐุง ุงูุดูุฑ",
        no_events: "ูุง ุชูุฌุฏ ุจุทููุงุช ููุฐุง ุงูุดูุฑ",
      
        championships: "ุงูุชุชููุฌุงุช",
        select_year_label: "ุงุฎุชุฑ ุงูุณูุฉ",
        championship_rank: "ุฑูู ุงูุจุทููุฉ",
        final_match: "ุงููุจุงุฑุงุฉ ุงูููุงุฆูุฉ",
        season: "ุงูููุณู",
        opponent: "ุงููุฑูู ุงูููุฒูู",
        score: "ุงููุชูุฌุฉ",
        captain: "ุงููุงุจุชู",
        not_available: "ุบูุฑ ูุชููุฑ",
privacy_policy: "ุณูุงุณุฉ ุงูุฎุตูุตูุฉ",
privacy_welcome: "ูุฑุญุจูุง ุจูู ูู ุชุทุจูู \"ุจุทููุงุช ุงูููุงู\". ูุฐุง ุงูุชุทุจูู ุชู ุชุทููุฑู ุจุงุฌุชูุงุฏ ุดุฎุตู ูููุฏู ุฅูู ุฌูุน ูุนูููุงุช ุญูู ุชุงุฑูุฎ ูุฅูุฌุงุฒุงุช ูุงุฏู ุงูููุงู ุจุดูู ุดุงูู ููููุฏ ููุฌูููุฑ.",
independence_statement: "ุจูุงู ุงูุงุณุชููุงููุฉ",
independence_content: "ูุฐุง ุงูุชุทุจูู ุบูุฑ ุชุงุจุน ุฃู ูุฏุนูู ูู ูุจู ูุงุฏู ุงูููุงู ุงูุฑุณูู ุฃู ุฃู ุฌูุฉ ุฑุณููุฉ ุฃุฎุฑู. ุฌููุน ุงูุฌููุฏ ุงููุจุฐููุฉ ููุง ุดุฎุตูุฉ ููุณุชููุฉ.",
content_sources: "ูุตุงุฏุฑ ุงููุญุชูู",
sources_content: "ุชู ุฌูุน ุฌููุน ุงูุจูุงูุงุช ูุงููุนูููุงุช ูู ูุตุงุฏุฑ ุนุงูุฉ ููุซููุฉ ูุซู ุงูุฅูุชุฑูุช. ููุงุทุน ุงูููุฏูู ุงููุนุฑูุถุฉ ูู ูุตุงุฏุฑูุง ุงูุฃุตููุฉ (ูุซู ูููุงุช ุงูููุชููุจ) ููู ูุชู ุชุนุฏูููุง. ุฅุฐุง ููุช ูุงูููุง ูุฃู ูุญุชูู ูุชุฑุบุจ ูู ุฅุฒุงูุชูุ ูุฑุฌู ุงูุชูุงุตู ูุนูุง.",
copyright: "ุญููู ุงููุดุฑ",
copyright_content: "ุฌููุน ุญููู ุงูููููุฉ ุงูููุฑูุฉ ููุชุทุจูู ูุญููุธุฉ. ูููุน ูุณุฎ ุฃู ุชุนุฏูู ุฃู ุงุณุชุฎุฏุงู ุงูุชุทุจูู ูุฃุบุฑุงุถ ุชุฌุงุฑูุฉ ุฏูู ุฅุฐู ูุณุจู.",
data_policy: "ุณูุงุณุฉ ุงูุจูุงูุงุช",
data_policy_content: "ูุญู ูุง ูุฌูุน ุฃู ูุดุงุฑู ุจูุงูุงุช ุงููุณุชุฎุฏููู ูุน ุฃุทุฑุงู ุซุงูุซุฉ. ุฅุฐุง ููุช ุจุงูุชุณุฌูู ูู ุงูุชุทุจููุ ุณูุชู ุงุณุชุฎุฏุงู ุจูุงูุงุชู ููุท ูุชุญุณูู ุชุฌุฑุจุฉ ุงูุงุณุชุฎุฏุงู.",
contact_us: "ุชูุงุตู ูุนูุง",
contact_content: "ุฅุฐุง ูุงู ูุฏูู ุฃู ุงุณุชูุณุงุฑุงุช ุฃู ุงุนุชุฑุงุถุงุชุ ููููู ุงูุชูุงุตู ูุนูุง ุนุจุฑ ุงูุจุฑูุฏ ุงูุชุงูู:",

        footer_text: "ยฉ ุฌููุน ุงูุญููู ูุญููุธุฉ ูุญุณุงุจ \"ุญุงูู ุงูุฐูู\" - ุงูุฅุตุฏุงุฑ ุงูุฃูู 2025"
      
        // ุฅุถุงูุฉ ุงููุฒูุฏ ูู ุงููุตูุต ููุง...
    },
    en: {
      
        app_title: "Hilal Club App",
        change_language_ar: "Arabic",
        change_language_en: "English",
        menu_toggle: "โฐ",
        hilal_info: "Hilal Information",
        support: "Support",
        championships: "Championships",
        competitions: "Competitions",
        team_matches: "Matches",
        team_players: "First Team",
        year_stats: "League Stats",
        managers: "Club Presidents",
        youtube_videos: "Highlight Videos",
        hilal_map: "Hilal Platforms",
        world_cup: "World Cup",
        privacy_policy: "Privacy Policy",
        about_us: "About Us",
        support_notes: "Support Notes",
      app_title: "Sweet Taste App",
        welcome_message: "Welcome to our app!",
        welcome_description: "Enjoy exclusive information and data about Al Hilal's history and achievements.",
        timer_message: "You will be logged out in 10 seconds...",
        register_title: "Login Screen",
        user_name_label: "Username",
        user_name_placeholder: "Enter your username",
        user_name_error: "Please enter a valid username.",
        user_email_label: "Email Address",
        user_email_placeholder: "example@example.com",
        user_email_error: "Please enter a valid email address.",
        register_button: "Register",
       twitter: "Twitter",
        youtube: "YouTube",
        telegram: "Telegram",
       year_stats: "๐ League Stats",
        select_year_label: "Select Year",
        match_number: "Match Number",
        year: "Year",
        round: "Round",
        team1: "Al-Hilal",
        team2: "Opponent",
        result: "Result",
        winner: "Winner",
       year_stats: "๐ League Stats",
        select_year_label: "Select Year",
        all: "All",
        wins: "Wins",
        losses: "Losses",
        draws: "Draws",
        match_number: "Match Number",
        managers_title: "Club Presidents",
        manager_image: "Manager Image",
        prev: "Previous",
        next: "Next",
        no_data: "No data available for managers",
        no_wins: "No trophies",
        period: "Time Period",
        trophies: "Trophies",
        stats: "Statistics",
        total_years: "Total Years",
        total_trophies: "Total Trophies",
        years: "Years",
        youtube_videos: "YouTube Videos",
        previous: "Previous",
        next: "Next",
        page: "Page",
        of: "of",
        video_title_not_available: "Title not available",
       world_cup: "World Cup",
        world_cup_details: "World Cup Details",
        back_to_world_cup: "Back to World Cup",
        view_details: "View Details",
        opponent: "Opponent",
        date: "Date",
        stadium: "Stadium",
        captain: "Captain",
        result: "Result",
       championship: "Championship",
        loading: "Loading data...",
        telegram_link: "Subscribe to Telegram channel for updates",
        last_match: "Last Match",
        no_matches: "No matches recorded",
        this_month_events: "This Month's Events",
        no_events: "No events this month",
        championships: "Championships",
        select_year_label: "Select Year",
        championship_rank: "Championship Rank",
        final_match: "Final Match",
        season: "Season",
        opponent: "Opponent",
        score: "Score",
        captain: "Captain",
        not_available: "Not Available",
      
      privacy_policy: "Privacy Policy",
privacy_welcome: "Welcome to the \"Al Hilal Achievements\" app. This app was developed as a personal effort to gather comprehensive and useful information about Al Hilal Club's history and achievements.",
independence_statement: "Independence Statement",
independence_content: "This app is not affiliated with or endorsed by the official Al Hilal Club or any other official entity. All efforts here are personal and independent.",
content_sources: "Content Sources",
sources_content: "All data and information were collected from reliable public sources like the internet. Videos are displayed from their original sources (e.g., YouTube channels) without modification. If you own any content and wish to have it removed, please contact us.",
copyright: "Copyright",
copyright_content: "All intellectual property rights of the app are reserved. Copying, modifying, or using the app for commercial purposes without prior permission is prohibited.",
data_policy: "Data Policy",
data_policy_content: "We do not collect or share user data with third parties. If you register in the app, your data will only be used to improve the user experience.",
contact_us: "Contact Us",
contact_content: "If you have any inquiries or objections, you can contact us at the following email:",
      
      

        footer_text: "ยฉ All rights reserved to \"Sweet Taste\" - Version 1.0 2025"
        // ุฅุถุงูุฉ ุงููุฒูุฏ ูู ุงููุตูุต ููุง...
    }
};
/**
 * ุฏุงูุฉ ูุชุทุจูู ุงูุชุฑุฌูุฉ ุนูู ุงููุตูุต ุงูุซุงุจุชุฉ
 */
function applyStaticTranslations() {
    document.querySelectorAll("[data-key]").forEach(element => {
        const key = element.getAttribute("data-key");
        if (translations[currentLanguage] && translations[currentLanguage][key]) {
            element.textContent = translations[currentLanguage][key];
        } else {
            console.warn(`Translation key "${key}" is missing for language "${currentLanguage}"`);
        }
    });
}

function switchLanguage(lang) {
    currentLanguage = lang;
    localStorage.setItem("language", lang);

    // ุชุญุฏูุซ ุงุชุฌุงู ุงูุตูุญุฉ
    document.documentElement.dir = lang === "ar" ? "rtl" : "ltr";
    document.documentElement.lang = lang;

    // ุชุทุจูู ุงูุชุฑุฌูุฉ ุงูุซุงุจุชุฉ
    applyStaticTranslations();

    // ุชุญุฏูุซ ุงููุณู ุงูููุชูุญ ุจูุงุกู ุนูู ุงููุบุฉ
    const mainContent = document.getElementById("main-content");
    const currentSection = mainContent.dataset.section;

    // ุชุญุฏูุซ ุงููุณู ุงูููุชูุญ ุฏููุงูููููุง
    switch (currentSection) {
        case "year-stats":
            const selectedYear = document.getElementById("year-stats-select")?.value;
            if (selectedYear) fetchYearStatsData(); // ุชุญุฏูุซ ุจูุงูุงุช ูุณู "ุญุณููุงุช ุงูุฏูุฑู"
            break;

    case "team-matches":
    const selectedTeam = document.getElementById("team-select")?.value;
    fetchTeamMatchesData(); // ุชุญุฏูุซ ุงูุฌุฏูู ุจูุงุกู ุนูู ุงููุฑูู ูุงููุบุฉ
    break;
    
       case "championships":
            const championshipsSelectedYear = document.getElementById("year-select")?.value; // ุญูุธ ุงูุณูุฉ ุงููุญุฏุฏุฉ
            openChampionships(championshipsSelectedYear); // ุฅุนุงุฏุฉ ุชุญููู ุงููุณู ุจุงูุณูุฉ ุงููุญุฏุฏุฉ
            break;

        case "managers":
            openManagers(); // ุฅุนุงุฏุฉ ุชุญููู ูุณู "ุฑุคุณุงุก ุงููุงุฏู"
            break;

        case "youtube-videos":
            openYouTubeVideos(); // ุฅุนุงุฏุฉ ุชุญููู ูุณู "ููุงุทุน ุงูุชุชููุฌ"
            break;

        case "world-cup":
            openWorldCup(); // ุฅุนุงุฏุฉ ุชุญููู ูุณู "ูุฃุณ ุงูุนุงูู"
            break;

        case "hilal-map":
            openHilalMap(); // ุฅุนุงุฏุฉ ุชุญููู ูุณู "ููุตุงุช ุงูููุงู"
            break;

        case "timeline":
            loadTimeline(); // ุฅุนุงุฏุฉ ุชุญููู ุงูุดุฑูุท ุงูุฒููู
            break;

       case "privacy-policy":
    openContent("privacy-policy");
    break;
        
     case "team-players":
    openTeamPlayers(); // ุฅุนุงุฏุฉ ุชุญููู ุดุงุดุฉ ุงููุฑูู ุงูุฃูู
    break;
        
case "youtube-videos":
    openYouTubeVideos(); // ุฅุนุงุฏุฉ ุชุญููู ุตูุญุฉ ุงูููุฏูููุงุช ูุน ุงูุชุฑุฌูุฉ
    break;

        default:
            console.warn("ุงููุณู ุงูุญุงูู ุบูุฑ ูุนุฑู ุฃู ูุง ูุญุชุงุฌ ุฅูู ุชุญุฏูุซ ุฏููุงูููู.");
    }

    // ุฅุถุงูุฉ ุฒุฑ ุงูุฑุฌูุน ุนูุฏ ูู ุชุญุฏูุซ
    addHomeButton();
}

      

const googleSheetURL = "https://script.google.com/macros/s/AKfycbzvHbZnVRWDv0yDMoWMEDhrUBmwNI_890WfWZFYDN0Rx7l2AzJX3sq_dQz9cFtkbghW/exec";

let sessionTimer;
let countdownTimer;
/* 
ุฏุงูุฉ initializeApp
ุชููู ุจุชุญุฏูุฏ ุญุงูุฉ ุงููุณุชุฎุฏู (ูุณุฌู ุฏุฎูู ุฃู ุบูุฑ ูุณุฌู) ูุชุนุฑุถ ุงูุดุงุดุฉ ุงูููุงุณุจุฉ ุจูุงุกู ุนูู ุญุงูุชู.
*/
function initializeApp() {
    const storedUser = JSON.parse(localStorage.getItem("user"));
    const toggleButton = document.getElementById("menu-toggle");
    if (storedUser) {
        showWelcomeScreen(storedUser);
        if (toggleButton) toggleButton.style.display = "inline-block";
    } else {
        showRegisterScreen();
        if (toggleButton) toggleButton.style.display = "none"; // ุฅุฎูุงุก ุฒุฑ ุงููููู ุจุงุฑ ุนูุฏ ุงูุฅููุงุน ุฅุฐุง ูู ููู ุงููุณุชุฎุฏู ูุณุฌูุงู
    }
}

/* 
ุฏุงูุฉ showWelcomeScreen
ุชุนุฑุถ ุดุงุดุฉ ุงูุชุฑุญูุจ ุนูุฏ ุชุณุฌูู ุงูุฏุฎูู ุจูุฌุงุญ ูุชููู ุจุชููุฆุฉ ุงููููู ุจุงุฑ ูุฒุฑ ุชุณุฌูู ุงูุฎุฑูุฌ.
*/
function showWelcomeScreen(user) {
    document.getElementById("welcome-screen").style.display = "block";
    document.getElementById("register-screen").style.display = "none";
    document.getElementById("logout-btn").style.display = "inline-block";

    const toggleButton = document.getElementById("menu-toggle");
    if (toggleButton) toggleButton.style.display = "inline-block"; // ุฅุธูุงุฑ ุฒุฑ ุงููููู ุจุงุฑ

    const minibar = document.getElementById("minibar");
    if (minibar) minibar.style.display = "block";

    startSessionTimer(); // ุฅุนุงุฏุฉ ุจุฏุก ูุคูุช ุงูุฌูุณุฉ
}


/* 
ุฏุงูุฉ showRegisterScreen
ุชุนุฑุถ ุดุงุดุฉ ุงูุชุณุฌูู ุฅุฐุง ูู ููู ุงููุณุชุฎุฏู ูุณุฌู ุฏุฎูู ูุชููู ุจุฅุฎูุงุก ุงูุฃุฒุฑุงุฑ ุบูุฑ ุงูุถุฑูุฑูุฉ.
*/
function showRegisterScreen() {
    document.getElementById("register-screen").style.display = "block";
    document.getElementById("welcome-screen").style.display = "none";
    document.getElementById("logout-btn").style.display = "none";

    const toggleButton = document.getElementById("menu-toggle");
    if (toggleButton) toggleButton.style.display = "none"; // ุฅุฎูุงุก ุฒุฑ ุงููููู ุจุงุฑ
}
/* 
ุฏุงูุฉ startSessionTimer
ุชููู ุจุชุดุบูู ุนุฏุงุฏ ุงูุฌูุณุฉ (5 ุฏูุงุฆู) ูุนูุฏ ุงูุชูุงุฆู ูุชู ุชุณุฌูู ุงูุฎุฑูุฌ ุชููุงุฆููุง.
*/
/* ุฏุงูุฉ startSessionTimer */
function startSessionTimer() {
    const storedUser = JSON.parse(localStorage.getItem("user"));
    const adminEmail = "Abunowaf@outlook.com";

    // ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ุงูุญุงูู ูู ุงูุฅุฏููุ ุงุณุชุซูุงุก ูู ุชุณุฌูู ุงูุฎุฑูุฌ
    if (storedUser && storedUser.email === adminEmail) {
        console.log("ุงูุฅุฏูู ูุณุฌู ุฏุฎููุ ุชู ุงุณุชุซูุงุคู ูู ุชุณุฌูู ุงูุฎุฑูุฌ ุงูุชููุงุฆู.");
        return;
    }

    // ุฅูุบุงุก ุฃู ูุคูุช ุฌูุณุฉ ุณุงุจู
    if (sessionTimer) clearTimeout(sessionTimer);

    // ุฅุนุฏุงุฏ ูุคูุช ุงูุฌูุณุฉ
    sessionTimer = setTimeout(() => {
        const timerElement = document.getElementById("timer");
        let countdown = 10; // ุนุฏุฏ ุงูุซูุงูู ููุนุฏ ุงูุชูุงุฒูู

        if (timerElement) {
            timerElement.style.display = "block"; // ุฅุธูุงุฑ ุงูุนุฏุงุฏ
            timerElement.textContent = `ุณูุชู ุชุณุฌูู ุฎุฑูุฌู ุจุนุฏ ${countdown} ุซูุงูู...`;
        }
        // ุจุฏุก ุงูุนุฏ ุงูุชูุงุฒูู
        countdownTimer = setInterval(() => {
            countdown--;

            if (timerElement) {
                timerElement.textContent = `ุณูุชู ุชุณุฌูู ุฎุฑูุฌู ุจุนุฏ ${countdown} ุซูุงูู...`;
            }

            if (countdown === 0) {
                clearInterval(countdownTimer); // ุฅูุบุงุก ุงูุนุฏ ุงูุชูุงุฒูู
                if (timerElement) timerElement.style.display = "none"; // ุฅุฎูุงุก ุงูุนุฏุงุฏ
                logoutUser(); // ุชุณุฌูู ุงูุฎุฑูุฌ ุจุนุฏ ุงูุชูุงุก ุงูุนุฏุงุฏ
            }
        }, 1000);
    }, 5 * 60 * 1000); // 5 ุฏูุงุฆู ูู ุนุฏู ุงููุดุงุท
}

/* 
ุฏุงูุฉ logoutUser
ุชููู ุจุชุณุฌูู ุฎุฑูุฌ ุงููุณุชุฎุฏู ูุฅุนุงุฏุฉ ุชุนููู ุญุงูุฉ ุงูุจุฑูุงูุฌ ูุฅุฎูุงุก ุฌููุน ุงูุนูุงุตุฑ ุงููุฑุชุจุทุฉ ุจุงููุณุชุฎุฏู.
*/
// ุชุนุฏูู logoutUser ููุชุฃูุฏ ูู ุฅุนุงุฏุฉ ุชุนููู ุงูุญุงูุฉ ุจุงููุงูู
 function logoutUser() {
    const minibar = document.getElementById("minibar");
    const overlay = document.getElementById("overlay");
    const toggleButton = document.getElementById("menu-toggle");
    const logoutButton = document.getElementById("logout-btn");

    localStorage.removeItem("user");

    // ุฅุนุงุฏุฉ ุถุจุท ุงูุดุงุดุงุช
    document.getElementById("register-screen").style.display = "block";
    document.getElementById("welcome-screen").style.display = "none";

    // ูุณุญ ูุญุชูู ุงูุชุชููุฌุงุช
    const mainContent = document.getElementById("main-content");
    mainContent.style.display = "none";
    mainContent.innerHTML = "";

    // ุฅุนุงุฏุฉ ุฅุฎูุงุก ุงูุฃุฒุฑุงุฑ ูุงูุนูุงุตุฑ
    if (minibar) {
        minibar.classList.remove("open");
        minibar.style.display = "none";
    }
    if (overlay) overlay.classList.remove("show");
    if (toggleButton) toggleButton.style.display = "none";
    if (logoutButton) logoutButton.style.display = "none";

    alert("ุชู ุชุณุฌูู ุฎุฑูุฌู ุจูุฌุงุญ.");
}

/* 
ุฏุงูุฉ registerUser
ุชููู ุจุชุณุฌูู ูุณุชุฎุฏู ุฌุฏูุฏ ุนู ุทุฑูู ุงูุชุญูู ูู ุงูุจูุงูุงุช ูุฅุฑุณุงููุง ุฅูู Google Sheets.
*/
function registerUser() {
    const name = document.getElementById("user-name").value.trim();
    const email = document.getElementById("user-email").value.trim();
    const registerButton = document.getElementById("register-btn");

    // ุฅุฎูุงุก ุฑุณุงุฆู ุงูุฎุทุฃ ุฃููุงู
    clearErrors();

    // ุงูุชุญูู ูู ุงููุฏุฎูุงุช
    let hasError = false;
    if (!name) {
        showError("user-name", "ูุฑุฌู ุฅุฏุฎุงู ุงุณู ุงููุณุชุฎุฏู (ูุซุงู: Ali123).");
        hasError = true;
    }
    if (!isValidEmail(email)) {
        showError("user-email", "ูุฑุฌู ุฅุฏุฎุงู ุจุฑูุฏ ุฅููุชุฑููู ุตุญูุญ (ูุซุงู: example@example.com).");
        hasError = true;
    }

    if (hasError) return; // ุฅุฐุง ูุงู ููุงู ุฎุทุฃุ ูุง ุชููู ุงูุนูููุฉ

    const storedUser = JSON.parse(localStorage.getItem("user"));

    // ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ููุฌูุฏูุง ูุณุจููุง
    if (storedUser && storedUser.name === name && storedUser.email === email) {
        alert(`ูุฑุญุจูุง ุจุนูุฏุชูุ ${name}!`);
        showWelcomeScreen(storedUser);
        return;
    }
/* 
ุฏุงูุฉ showError
ุชููู ุจุนุฑุถ ุฑุณุงูุฉ ุฎุทุฃ ุจุฌุงูุจ ุงูุญูู ุงููุญุฏุฏ.
*/
function showError(fieldId, message) {
    const errorElement = document.getElementById(`${fieldId}-error`);
    errorElement.textContent = message;
    errorElement.style.display = "block";
}

/* 
ุฏุงูุฉ clearErrors
ุชููู ุจุฅุฎูุงุก ุฌููุน ุฑุณุงุฆู ุงูุฎุทุฃ.
*/
function clearErrors() {
    const errorMessages = document.querySelectorAll(".error-message");
    errorMessages.forEach((error) => {
        error.textContent = "";
        error.style.display = "none";
    });
}

    // ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ุฌุฏูุฏูุง
    const uuid = generateUUID();
    registerButton.disabled = true;
    registerButton.textContent = "ุฌุงุฑู ุงูุชุณุฌูู...";

    fetch(googleSheetURL, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ name, email, uuid }),
        mode: "no-cors"
    })
        .then(() => {
            const user = { name, email, uuid };
            localStorage.setItem("user", JSON.stringify(user));
            alert("ุชู ุชุณุฌููู ุจูุฌุงุญ!");
            showWelcomeScreen(user);
        })
        .catch(() => alert("ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุงูุชุณุฌูู. ุญุงูู ูุฑุฉ ุฃุฎุฑู."))
        .finally(() => {
            registerButton.disabled = false;
            registerButton.textContent = "ุชุณุฌูู";
        });
}

/* 
ุฏุงูุฉ isValidEmail
ุชุชุญูู ูู ุตุญุฉ ุนููุงู ุงูุจุฑูุฏ ุงูุฅููุชุฑููู ุจุงุณุชุฎุฏุงู ุชุนุจูุฑ ููุชุธู.
*/
function isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
}


/* 
ุฏุงูุฉ generateUUID
ุชููู ุจุฅูุดุงุก ูุนุฑู ูุฑูุฏ ุนุงููู (UUID) ูุชุญุฏูุฏ ูู ูุณุชุฎุฏู.
*/
function generateUUID() {
    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {
        const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);
        return v.toString(16);
    });
}


/* 
ุฏุงูุฉ openContent
ุชุนุฑุถ ูุญุชูู ูุนูู ูู ุงููุณู ุงูุฑุฆูุณู ุจูุงุกู ุนูู ุงูุฒุฑ ุงูุฐู ุถุบุท ุนููู ุงููุณุชุฎุฏู.
*/
function openContent(content) {
    clearContent(); // ูุณุญ ุงููุญุชูู ุงูุณุงุจู

    const mainContent = document.getElementById("main-content");
    const welcomeScreen = document.getElementById("welcome-screen");
    mainContent.style.display = "block";
    welcomeScreen.style.display = "none";

    // ุฅุถุงูุฉ ุงููุญุชูู ุงูุฌุฏูุฏ
    mainContent.innerHTML = `<h2>${content}</h2><p>ูุฑุญุจูุง ุจู ูู ูุณู ${content}!</p>`;
    toggleMinibar(); // ุฅุบูุงู ุงููููู ุจุงุฑ ุจุนุฏ ุงุฎุชูุงุฑ ุงููุญุชูู
}





/* 
ุฏุงูุฉ toggleMinibar
ุชุชุญูู ูู ูุชุญ ูุฅุบูุงู ุงููููู ุจุงุฑ.
*/
function toggleMinibar() {
    const minibar = document.getElementById("minibar");
    const overlay = document.getElementById("overlay");
    const welcomeScreen = document.getElementById("welcome-screen");

    minibar.classList.toggle("open");
    if (minibar.classList.contains("open")) {
        overlay.classList.add("show");
        document.body.style.overflow = "hidden";
        welcomeScreen.style.display = "none"; // ุฅุฎูุงุก ุงูุชุฑุญูุจ ุนูุฏ ูุชุญ ุงููููู ุจุงุฑ
    } else {
        overlay.classList.remove("show");
        document.body.style.overflow = "";
        const mainContent = document.getElementById("main-content");
        if (!mainContent.innerHTML.trim()) {
            // ุฅุฐุง ูู ูุชู ุงุฎุชูุงุฑ ูุญุชูู
            welcomeScreen.style.display = "block";
        }
    }
}


// ุฅุบูุงู ุงููููู ุจุงุฑ ุนูุฏ ุงูุถุบุท ุนูู ุฃู ุฒุฑ ุฏุงุฎูู.
document.querySelectorAll(".minibar-buttons button").forEach(button => {
    button.addEventListener("click", () => {
        const minibar = document.getElementById("minibar");
        const overlay = document.getElementById("overlay");

        minibar.classList.remove("open");
        overlay.classList.remove("show");
        document.body.style.overflow = ""; // ุงุณุชุนุงุฏุฉ ุงูุชูุฑูุฑ
    });
});

// ุชุนุฏูู ุฏุงูุฉ showWelcomeScreen ูููุน ุชุดุบูู ุงูุนุฏุงุฏ ูุจุงุดุฑุฉ
function showWelcomeScreen(user) {
    const welcomeMessage = document.querySelector(".welcome-title");
    welcomeMessage.textContent = `ูุฑุญุจูุง ุจู ูุง ${user.name} ูู ุชุทุจูู ูุงุฏู ุงูููุงู!`;

    // ุฅุธูุงุฑ ุดุงุดุฉ ุงูุชุฑุญูุจ
    document.getElementById("welcome-screen").style.display = "block";
    document.getElementById("register-screen").style.display = "none";

    // ุฅุธูุงุฑ ุฒุฑ ุชุณุฌูู ุงูุฎุฑูุฌ ูุฒุฑ ุงููููู ุจุงุฑ
    document.getElementById("logout-btn").style.display = "inline-block";
document.getElementById("menu-toggle").style.display = "inline-block";

    // ุฅุนุงุฏุฉ ุชูููู ุงููููู ุจุงุฑ
    const minibar = document.getElementById("minibar");
    minibar.style.display = "block";

    // ุฅุนุงุฏุฉ ุถุจุท ูุคูุช ุงูุฌูุณุฉ
    clearTimeout(sessionTimer);
    clearInterval(countdownTimer);

    // ูุง ูุชู ุงุณุชุฏุนุงุก ุงูุนุฏุงุฏ ุฅูุง ุจุนุฏ 5 ุฏูุงุฆู ูู ุงูุฎููู
    startSessionTimer();
}
function clearContent() {
    const mainContent = document.getElementById("main-content");
    const welcomeScreen = document.getElementById("welcome-screen");
    
    // ุชูุธูู ุฌููุน ุงูุฃูุณุงู
    mainContent.innerHTML = ""; // ุญุฐู ุงููุญุชูู ุงูุณุงุจู
    mainContent.style.display = "none"; // ุฅุฎูุงุก ุงููุญุชูู ุงูุฑุฆูุณู
    welcomeScreen.style.display = "none"; // ุฅุฎูุงุก ุดุงุดุฉ ุงูุชุฑุญูุจ
}

function addHomeButton() {
    const mainContent = document.getElementById("main-content");
    const backButton = document.createElement("button");
    backButton.textContent = "ุงูุฑุฌูุน ุฅูู ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ";
    backButton.classList.add("back-to-home-btn");
    backButton.addEventListener("click", () => {
        clearContent(); // ุชูุธูู ุงููุญุชูู
        showWelcomeScreen(JSON.parse(localStorage.getItem("user"))); // ุนุฑุถ ุดุงุดุฉ ุงูุชุฑุญูุจ
    });
    mainContent.appendChild(backButton);
}
function handleButtonClick(event) {
    const contentType = event.target.getAttribute("data-content");
    const mainContent = document.getElementById("main-content");

    // ูุณุญ ุงููุญุชูู ุงูุณุงุจู
    clearContent();
    mainContent.dataset.section = contentType; // ุชุนููู ุงููุณู ุงูุญุงูู

    switch (contentType) {
          case "championships":
            openChampionships(); // ูุชุญ ูุณู ุงูุชุชููุฌุงุช
            break;
        
      
        case "team-players":
            openTeamPlayers(); // ูุชุญ ูุณู ุงููุฑูู ุงูุฃูู
            break;
        case "team-matches":
            openTeamMatches(); // ูุชุญ ูุณู ุงูููุงุฌูุงุช
            break;
        case "competitions":
            openCompetitions(); // ูุชุญ ูุณู ุงููุณุงุจูุงุช
            break;
        case "youtube":
            openYouTubeSection(); // ูุชุญ ูุณู ุงูููุชููุจ
            break;
        case "year-stats":
            openYearStats(); // ูุชุญ ูุณู ุญุณููุงุช ุงูุฏูุฑู
            break;
        case "today-events":
            openTodayEvents(); // ูุชุญ ูุณู "ูู ูุซู ูุฐุง ุงูููู"
            break;
        case "managers":
            openManagers(); // ูุชุญ ูุณู ุฑุคุณุงุก ุงููุงุฏู
            break;
        case "youtube-videos":
            openYouTubeVideos(); // ูุชุญ ูุณู ููุงุทุน ุงูุชุชููุฌ
            break;
        case "world-cup":
            openWorldCup(); // ูุชุญ ูุณู ูุฃุณ ุงูุนุงูู
            break;
        case "hilal-map":
            openHilalMap(); // ูุชุญ ูุณู ููุตุงุช ุงูููุงู
            break;
       case "privacy-policy":
    openContent("privacy-policy"); // ุชุฃูุฏ ูู ุชูุฑูุฑ ููุณ ุงููููุฉ
    break;

        default:
            mainContent.innerHTML = `<h2>ูุญุชูู ุบูุฑ ูุนุฑูู</h2>`;
    }

    addHomeButton(); // ุฅุถุงูุฉ ุฒุฑ ุงูุฑุฌูุน ุฅูู ุงูุตูุญุฉ ุงูุฑุฆูุณูุฉ
    mainContent.style.display = "block"; // ุนุฑุถ ุงููุญุชูู
    toggleMinibar(); // ุฅุบูุงู ุงููููู ุจุงุฑ
}


//============================================================================================================================================

//============================================================================================================================================
// ุงููุชุบูุฑุงุช ุงูุนุงูุฉ ูุงูุซุงุจุชุฉ

// ูุนุฑู Google Sheets
const ConsentSheetID = "1ksZhTi3JW4QP5MOk8fcWnUCeXbmTqpXW4BLxLaHtmc8";

// ุฃุณูุงุก ุงูุดูุชุงุช
const SHEET_CHAMPIONSHIPS = "Sheet2"; // ุดูุช ุงูุชุชููุฌุงุช
const SHEET_PLAYERS = "player"; // ุดูุช ุงููุฑูู ุงูุฃูู
const SHEET_PAST_GAMES = "PastGames"; // ุดูุช ุงูููุงุฌูุงุช
const managersSheet = "manger";
const todayEventSheet = "today-event";
const mapsSheet = "MAPS";  
const fifaWorldCupSheet = "WorldCupParticipation";

// ูุชุบูุฑุงุช ุงููุฑูู ุงูุฃูู
let playersData = [];
let teamPlayersCurrentPage = 1;
const playersPerPage = 5; // ุนุฏุฏ ุงููุงุนุจูู ููู ุตูุญุฉ

//============================================================================================================================================
// ุงูุฏูุงู ุงูุนุงูุฉ

/**
 * ุฏุงูุฉ ูุฌูุจ ุงูุจูุงูุงุช ูู Google Sheets
 * @param {string} sheetName - ุงุณู ุงูุดูุช
 * @param {function} callback - ุงูุฏุงูุฉ ุงูุชู ุณูุชู ุชูููุฐูุง ุจุนุฏ ุงุณุชูุงู ุงูุจูุงูุงุช
 */
function fetchDataFromSheet(sheetName, callback) {
    const url = `https://docs.google.com/spreadsheets/d/${ConsentSheetID}/gviz/tq?tqx=out:csv&sheet=${encodeURIComponent(sheetName)}`;
    Papa.parse(url, {
        download: true,
        header: true,
        complete: function (results) {
            if (results && results.data && results.data.length > 0) {
                const translatedData = results.data.map(row => {
                    Object.keys(row).forEach(key => {
                        if (key.endsWith("_en")) {
                            const baseKey = key.replace("_en", "");
                            row[baseKey] = currentLanguage === "ar" ? row[baseKey] : row[`${baseKey}_en`] || row[baseKey];
                        }
                    });
                    return row;
                });
                callback(translatedData); // ุชูุฑูุฑ ุงูุจูุงูุงุช ุจุนุฏ ุงูุชุฑุฌูุฉ
            } else {
                console.error("No data found or invalid format.");
            }
        },
        error: function (error) {
            console.error("Error fetching data: ", error);
        }
    });
}

//============================================================================================================================================
function openChampionships(selectedYear = null) {
    const mainContent = document.getElementById("main-content");
    mainContent.innerHTML = `
        <h2 data-key="championships">๐ ${translations[currentLanguage].championships || "ุชุชููุฌุงุช ุงูุจุทููุงุช ุงูููุงุฆูุฉ"}</h2>
        <div class="dropdown-container">
            <select id="year-select" class="styled-dropdown">
                <option value="" disabled selected>${translations[currentLanguage].select_year_label || "ุงุฎุชุฑ ุงูุณูุฉ"}</option>
            </select>
        </div>
        <div id="championships-data" class="cards-container"></div>
    `;

    // ุฌูุจ ุงูุจูุงูุงุช ุจุงุณุชุฎุฏุงู ุงูุฏุงูุฉ ุงูุนุงูุฉ
    fetchDataFromSheet(SHEET_CHAMPIONSHIPS, (data) => {
        populateChampionshipYears(data, selectedYear); // ููุก ูุงุฆูุฉ ุงูุณููุงุช
    });
}

function populateChampionshipYears(data, selectedYear = null) {
    const uniqueYears = [...new Set(data.map(row => row.Year))].sort();
    const yearSelect = document.getElementById("year-select");

    yearSelect.innerHTML = `<option value="" disabled selected>${translations[currentLanguage].select_year_label || "ุงุฎุชุฑ ุงูุณูุฉ"}</option>`;
    uniqueYears.forEach(year => {
        const option = document.createElement("option");
        option.value = year;
        option.textContent = `๐ ${year}`; // ุงูุณูุฉ ูุง ุชุญุชุงุฌ ุชุฑุฌูุฉ
        yearSelect.appendChild(option);
    });

    // ุฅุฐุง ูุงูุช ููุงู ุณูุฉ ูุญุฏุฏุฉุ ุญุฏุฏูุง ูุฃุนุฏ ุนุฑุถ ุงูุจูุงูุงุช
    if (selectedYear) {
        yearSelect.value = selectedYear; // ุชุญุฏูุฏ ุงูุณูุฉ
        const filteredData = data.filter(row => row.Year === selectedYear);
        renderChampionships(filteredData); // ุนุฑุถ ุงูุจูุงูุงุช ุงููููุชุฑุฉ
    }

    // ุฅุถุงูุฉ ุญุฏุซ ุนูุฏ ุชุบููุฑ ุงูุณูุฉ
    yearSelect.addEventListener("change", () => {
        const selectedYear = yearSelect.value;
        const filteredData = data.filter(row => row.Year === selectedYear);
        renderChampionships(filteredData);
    });
}

function renderChampionships(data) {
    const dataContainer = document.getElementById("championships-data");
    dataContainer.innerHTML = ""; // ุชูุธูู ุงูุจูุงูุงุช ุงููุฏููุฉ

    data.forEach(item => {
        const card = document.createElement("div");
        card.className = "championship-card";
        card.innerHTML = `
            <div class="card-rank">
                ${translations[currentLanguage].championship_rank || "ุฑูู ุงูุจุทููุฉ"}: 
                <span class="rank-value">${item["Championship Rank"]}</span>
            </div>
            <h3 class="card-title">${currentLanguage === "ar" ? item["Name"] : item["Name_en"]}</h3>
            <img src="${item["Image URL"]}" alt="${item["Name"]}" class="championship-image">
            <div class="info-section">
                <i class="fa fa-trophy"></i>
                <span class="info-label">${translations[currentLanguage].final_match || "ุงููุจุงุฑุงุฉ ุงูููุงุฆูุฉ"}:</span>
                <span class="info-value">${currentLanguage === "ar" ? item["Final Match"] : item["Final_Match_en"]}</span>
            </div>
            <div class="info-section">
                <i class="fa fa-calendar-alt"></i>
                <span class="info-label">${translations[currentLanguage].season || "ุงูููุณู"}:</span>
                <span class="info-value">${item["Date"]}</span>
            </div>
            <div class="info-section">
                <i class="fa fa-users"></i>
                <span class="info-label">${translations[currentLanguage].opponent || "ุงููุฑูู ุงูููุฒูู"}:</span>
                <span class="info-value">${currentLanguage === "ar" ? item["Opponent"] : item["Opponent_en"]}</span>
            </div>
            <div class="info-section">
                <i class="fa fa-futbol"></i>
                <span class="info-label">${translations[currentLanguage].score || "ุงููุชูุฌุฉ"}:</span>
                <span class="info-value">${currentLanguage === "ar" ? item["Score"] : item["Score_en"]}</span>
            </div>
            <div class="info-section">
                <i class="fa fa-user"></i>
                <span class="info-label">${translations[currentLanguage].captain || "ุงููุงุจุชู"}:</span>
                <span class="info-value">${currentLanguage === "ar" ? item["captn"] : item["captn_en"] || translations[currentLanguage].not_available}</span>
            </div>
        `;
        dataContainer.appendChild(card);
    });
}

//============================================================================================================================================
// ุฏูุงู ุนุฑุถ ุงููุฑูู ุงูุฃูู

/**
 * ุฏุงูุฉ ููุชุญ ุดุงุดุฉ ุงููุฑูู ุงูุฃูู
 */
function openTeamPlayers() {
    const mainContent = document.getElementById("main-content");
    mainContent.innerHTML = `
        <h2 id="team-players-title">๐ฅ ุงููุฑูู ุงูุฃูู</h2>
        <div id="players-container" class="players-grid"></div>
        <div class="pagination-controls">
            <button id="prev-page-btn" onclick="prevPage()">ุงูุณุงุจู</button>
            <button id="next-page-btn" onclick="nextPage()">ุงูุชุงูู</button>
        </div>
    `;

    // ุฌูุจ ุงูุจูุงูุงุช ุจุงุณุชุฎุฏุงู ุงูุฏุงูุฉ ุงูุนุงูุฉ
    fetchDataFromSheet(SHEET_PLAYERS, (data) => {
        playersData = data; // ุชุฎุฒูู ุงูุจูุงูุงุช
        teamPlayersCurrentPage = 1; // ุฅุนุงุฏุฉ ุชุนููู ุงูุตูุญุฉ ุงูุญุงููุฉ
        displayPlayers(); // ุนุฑุถ ุงููุงุนุจูู
    });
}

/**
 * ุฏุงูุฉ ูุนุฑุถ ุงููุงุนุจูู ุญุณุจ ุงูุตูุญุฉ ุงูุญุงููุฉ
 */
function displayPlayers() {
    const playersContainer = document.getElementById("players-container");
    playersContainer.innerHTML = ""; // ุชูุธูู ุงููุญุชูู ุงูุณุงุจู

    const start = (teamPlayersCurrentPage - 1) * playersPerPage;
    const end = start + playersPerPage;
    const playersToDisplay = playersData.slice(start, end);

    playersToDisplay.forEach((player) => {
        const positionIcon = getPositionIcon(currentLanguage === "ar" ? player['class'] : player['class_en']);
        const playerCard = `
            <div class="player-card">
                <div class="player-number left">#${player['player_number']}</div>
                <img src="${player['Image URL']}" alt="${currentLanguage === "ar" ? player['neam'] : player['name_en']}" class="player-image">
                <div class="player-name">${currentLanguage === "ar" ? player['neam'] : player['name_en']}</div>
                <div class="player-position">${positionIcon} ${currentLanguage === "ar" ? player['class'] : player['class_en']}</div>
            </div>
        `;
        playersContainer.innerHTML += playerCard;
    });

    // ุงูุชุญูู ูู ุธููุฑ ุฃุฒุฑุงุฑ ุงูุชููู
    document.getElementById("prev-page-btn").style.display = teamPlayersCurrentPage > 1 ? "inline-block" : "none";
    document.getElementById("next-page-btn").style.display = end < playersData.length ? "inline-block" : "none";
}

/**
 * ุฏุงูุฉ ูุฅุฑุฌุงุน ุฃููููุฉ ุงููุฑูุฒ ุจูุงุกู ุนูู ุชุตููู ุงููุงุนุจ
 */
function getPositionIcon(playerClass) {
    switch (playerClass) {
        case "ุญุงุฑุณ ูุฑูู":
        case "Goalkeeper":
            return `<i class="fa fa-hand-paper"></i>`;
        case "ูุฏุงูุน":
        case "Defender":
            return `<i class="fa fa-shield-alt"></i>`;
        case "ููุงุฌู":
        case "Forward":
            return `<i class="fa fa-futbol"></i>`;
        default:
            return `<i class="fa fa-user"></i>`;
    }
}

/**
 * ุงูุชููู ููุตูุญุฉ ุงูุชุงููุฉ
 */
function nextPage() {
    teamPlayersCurrentPage++;
    displayPlayers();
}

/**
 * ุงูุชููู ููุตูุญุฉ ุงูุณุงุจูุฉ
 */
function prevPage() {
    teamPlayersCurrentPage--;
    displayPlayers();
}
//============================================================================================================================================
function openTeamMatches() {
    const mainContent = document.getElementById("main-content");
    mainContent.innerHTML = `
        <h2 id="team-matches-title" data-key="team_matches">โฝ ${translations[currentLanguage].team_matches || "ููุงุฌูุงุช ุงูููุงู"}</h2>
        <select id="team-select" class="styled-dropdown" onchange="fetchTeamMatchesData()">
            <option value="">-- ${translations[currentLanguage].select_year_label || "ุงุฎุชุฑ ุงููุฑูู"} --</option>
        </select>
        <div id="team-stats" class="team-stats-container"></div>
        <table id="team-stats-table" class="hidden">
            <thead>
                <tr>
                    <th data-key="year">${translations[currentLanguage].year || "ุงูุณูุฉ"}</th>
                    <th data-key="round">${translations[currentLanguage].round || "ุงูุฏูุฑ"}</th>
                    <th data-key="team1">${translations[currentLanguage].team1 || "ุงูููุงู"}</th>
                    <th data-key="team2">${translations[currentLanguage].team2 || "ุงูููุงูุณ"}</th>
                    <th data-key="result">${translations[currentLanguage].result || "ุงููุชูุฌุฉ"}</th>
                    <th data-key="winner">${translations[currentLanguage].winner || "ุงููุงุฆุฒ"}</th>
                </tr>
            </thead>
            <tbody id="team-stats-tbody"></tbody>
        </table>
        <div id="team-matches-stats" class="hidden">
            <button class="team-filter-btn all" onclick="fetchTeamMatchesData()" data-key="all">${translations[currentLanguage].all || "ุงููู"}</button>
            <button class="team-filter-btn wins" onclick="filterMatches('win')" data-key="wins">${translations[currentLanguage].wins || "ุงูุงูุชุตุงุฑุงุช"}</button>
            <button class="team-filter-btn losses" onclick="filterMatches('loss')" data-key="losses">${translations[currentLanguage].losses || "ุงูุฎุณุงุฆุฑ"}</button>
            <button class="team-filter-btn draws" onclick="filterMatches('draw')" data-key="draws">${translations[currentLanguage].draws || "ุงูุชุนุงุฏูุงุช"}</button>
        </div>
    `;

    // ุชุฃูุฏ ูู ุฅุฎูุงุก ุงูุฌุฏูู ูุงูุฃุฒุฑุงุฑ ุงูุชุฑุงุถููุง
    document.getElementById("team-stats-table").classList.add("hidden");
    document.getElementById("team-matches-stats").classList.add("hidden");

    // ุชุญููู ุฃุณูุงุก ุงููุฑู
    fetchDataFromSheet(SHEET_PAST_GAMES, populateTeamNames);
}
function populateTeamNames(data) {
    const teams = [...new Set(data.flatMap(game => [
        currentLanguage === "ar" ? game.Team1 : game.Team1_en,
        currentLanguage === "ar" ? game.Team2 : game.Team2_en
    ]).filter(team => team.trim() !== ""))];
    
    const teamSelect = document.getElementById("team-select");
    teamSelect.innerHTML = `<option value="">-- ${translations[currentLanguage].select_year_label || "ุงุฎุชุฑ ุงููุฑูู"} --</option>`;

    const teamIcon = "โฝ"; // ุฃููููุฉ ุนุงูุฉ ูููุฑูู

    teams.forEach(team => {
        const option = document.createElement("option");
        option.value = team;
        option.textContent = `${teamIcon} ${team}`; // ุฅุถุงูุฉ ุฃููููุฉ ูุงุญุฏุฉ ูุฌููุน ุงูุฎูุงุฑุงุช
        teamSelect.appendChild(option);
    });
}
function displayTeamMatches(matches) {
    const tableBody = document.getElementById("team-stats-tbody");
    tableBody.innerHTML = ""; // ุชูุธูู ูุญุชููุงุช ุงูุฌุฏูู

    matches.forEach(match => {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${match.Year}</td>
            <td>${currentLanguage === "ar" ? match.Round : match.Round_en}</td>
            <td>${currentLanguage === "ar" ? match.Team1 : match.Team1_en}</td>
            <td>${currentLanguage === "ar" ? match.Team2 : match.Team2_en}</td>
            <td>${match.Score1} - ${match.Score2}</td>
            <td>${currentLanguage === "ar" ? match.Winner : match.Winner_en}</td>
        `;
        tableBody.appendChild(row); // ุฅุถุงูุฉ ุงูุตู ุฅูู ุงูุฌุฏูู
    });
}


function fetchTeamMatchesData() {
    const selectedTeam = document.getElementById("team-select")?.value;
    if (!selectedTeam) {
        // ุฅุฐุง ูู ูุชู ุงุฎุชูุงุฑ ูุฑููุ ุฅุฎูุงุก ุงูุฌุฏูู ูุงูุฃุฒุฑุงุฑ
        document.getElementById("team-stats-table").classList.add("hidden");
        document.getElementById("team-matches-stats").classList.add("hidden");
        document.getElementById("team-stats").innerHTML = ""; // ุชูุธูู ุงูุฅุญุตุงุฆูุงุช
        return;
    }

    fetchDataFromSheet(SHEET_PAST_GAMES, (data) => {
        const matches = data.filter(game => 
            (currentLanguage === "ar" ? game.Team1 : game.Team1_en) === selectedTeam || 
            (currentLanguage === "ar" ? game.Team2 : game.Team2_en) === selectedTeam
        );

        if (matches.length > 0) {
            displayTeamMatches(matches); // ุนุฑุถ ุงูุจูุงูุงุช ูู ุงูุฌุฏูู
            updateTeamStats(matches, selectedTeam); // ุชุญุฏูุซ ุงูุฅุญุตุงุฆูุงุช
            document.getElementById("team-stats-table").classList.remove("hidden");
            document.getElementById("team-matches-stats").classList.remove("hidden");
        } else {
            console.warn("ูุง ุชูุฌุฏ ุจูุงูุงุช ูุทุงุจูุฉ.");
        }
    });
}

function updateTeamStats(matches, team) {
    const statsContainer = document.getElementById("team-stats");

    const totalMatches = matches.length;
    const wins = matches.filter(match => match.Winner === (currentLanguage === "ar" ? "ุงูููุงู" : "Al-Hilal")).length;
    const losses = matches.filter(match => match.Winner === team).length;
    const draws = matches.filter(match => match.Winner === (currentLanguage === "ar" ? "ุงูุชุนุงุฏู" : "Draw")).length;

    statsContainer.innerHTML = `
        <div class="team-stat-card">
            <i class="fa fa-futbol"></i><h3>${translations[currentLanguage].all || "ุงููุจุงุฑูุงุช"}</h3><p>${totalMatches}</p>
        </div>
        <div class="team-stat-card">
            <i class="fa fa-trophy"></i><h3>${translations[currentLanguage].wins || "ุงูุงูุชุตุงุฑุงุช"}</h3><p>${wins}</p>
        </div>
        <div class="team-stat-card">
            <i class="fa fa-times-circle"></i><h3>${translations[currentLanguage].losses || "ุงูุฎุณุงุฆุฑ"}</h3><p>${losses}</p>
        </div>
        <div class="team-stat-card">
            <i class="fa fa-handshake"></i><h3>${translations[currentLanguage].draws || "ุงูุชุนุงุฏูุงุช"}</h3><p>${draws}</p>
        </div>
    `;
}
function filterMatches(filterType) {
    const selectedTeam = document.getElementById("team-select")?.value;
    if (!selectedTeam) return;

    fetchDataFromSheet(SHEET_PAST_GAMES, (data) => {
        let matches = data.filter(game => game.Team1 === selectedTeam || game.Team2 === selectedTeam);

        // ุชุทุจูู ุงูููุชุฑุฉ ุจูุงุกู ุนูู ุงูููุน
        if (filterType === "win") {
            matches = matches.filter(game => game.Winner === (currentLanguage === "ar" ? "ุงูููุงู" : "Al-Hilal"));
        } else if (filterType === "loss") {
            matches = matches.filter(game => game.Winner !== (currentLanguage === "ar" ? "ุงูููุงู" : "Al-Hilal") && 
                                             game.Winner !== (currentLanguage === "ar" ? "ุงูุชุนุงุฏู" : "Draw"));
        } else if (filterType === "draw") {
            matches = matches.filter(game => game.Winner === (currentLanguage === "ar" ? "ุงูุชุนุงุฏู" : "Draw"));
        }

        displayTeamMatches(matches); // ุนุฑุถ ุงูุจูุงูุงุช ุงููููุชุฑุฉ
        updateTeamStats(matches, selectedTeam); // ุชุญุฏูุซ ุงูุฅุญุตุงุฆูุงุช
    });
}

//============================================================================================================================================

// ุฏุงูุฉ ูุชุญ ูุณู "ุญุณููุงุช ุงูุฏูุฑู"
function openYearStats() {
    const mainContent = document.getElementById("main-content");
    mainContent.innerHTML = `
        <h2 id="year-stats-title" data-key="year_stats">๐ ${translations[currentLanguage].year_stats}</h2>
        <label for="year-stats-select" class="styled-dropdown-label">
            <span data-key="select_year_label">${translations[currentLanguage].select_year_label || "ุงุฎุชุฑ ุงูุณูุฉ"}</span>
        </label>
        <select id="year-stats-select" class="styled-dropdown" onchange="fetchYearStatsData()">
            <option value="">-- ${translations[currentLanguage].select_year_label || "ุงุฎุชุฑ ุงูุณูุฉ"} --</option>
        </select>
        <div id="year-stats" class="team-stats-container hidden"></div>
        <table id="year-stats-table" class="hidden">
            <thead>
                <tr>
                    <th data-key="match_number">${translations[currentLanguage].match_number || "ุฑูู ุงููุจุงุฑุงุฉ"}</th>
                    <th data-key="year">${translations[currentLanguage].year || "ุงูุณูุฉ"}</th>
                    <th data-key="round">${translations[currentLanguage].round || "ุงูุฏูุฑ"}</th>
                    <th data-key="team1">${translations[currentLanguage].team1 || "ุงูููุงู"}</th>
                    <th data-key="team2">${translations[currentLanguage].team2 || "ุงูููุงูุณ"}</th>
                    <th data-key="result">${translations[currentLanguage].result || "ุงููุชูุฌุฉ"}</th>
                    <th data-key="winner">${translations[currentLanguage].winner || "ุงููุงุฆุฒ"}</th>
                </tr>
            </thead>
            <tbody id="year-stats-tbody"></tbody>
        </table>
        <div id="year-matches-stats" class="hidden">
            <button class="team-filter-btn all" onclick="fetchYearStatsData()" data-key="all">${translations[currentLanguage].all || "ุงููู"}</button>
            <button class="team-filter-btn wins" onclick="filterYearMatches('win')" data-key="wins">${translations[currentLanguage].wins || "ุงูุงูุชุตุงุฑุงุช"}</button>
            <button class="team-filter-btn losses" onclick="filterYearMatches('loss')" data-key="losses">${translations[currentLanguage].losses || "ุงูุฎุณุงุฆุฑ"}</button>
            <button class="team-filter-btn draws" onclick="filterYearMatches('draw')" data-key="draws">${translations[currentLanguage].draws || "ุงูุชุนุงุฏูุงุช"}</button>
        </div>
    `;

    fetchDataFromSheet(SHEET_PAST_GAMES, populateYearsDropdown);
}

// ุฏุงูุฉ ูููุก ูุงุฆูุฉ ุงูุณููุงุช
function populateYearsDropdown(data) {
    const years = [...new Set(data.map(game => game.Year))].sort();
    const yearSelect = document.getElementById("year-stats-select");

    yearSelect.innerHTML = `<option value="">-- ${translations[currentLanguage].select_year_label || "ุงุฎุชุฑ ุงูุณูุฉ"} --</option>`;
    years.forEach(year => {
        const option = document.createElement("option");
        option.value = year;
        option.textContent = year; // ุงูุณูุฉ ูุง ุชุญุชุงุฌ ุชุฑุฌูุฉ
        yearSelect.appendChild(option);
    });
}

// ุฏุงูุฉ ูุฌูุจ ุจูุงูุงุช ุงูุณูุฉ
function fetchYearStatsData() {
    const selectedYear = document.getElementById("year-stats-select").value;
    if (!selectedYear) {
        document.getElementById("year-stats-table").classList.add("hidden");
        document.getElementById("year-matches-stats").classList.add("hidden");
        document.getElementById("year-stats").classList.add("hidden");
        return;
    }

    fetchDataFromSheet(SHEET_PAST_GAMES, (data) => {
        const matches = data.filter(game => game.Year === selectedYear);
        displayYearMatches(matches);
        updateYearStats(matches);

        document.getElementById("year-stats-table").classList.remove("hidden");
        document.getElementById("year-matches-stats").classList.remove("hidden");
        document.getElementById("year-stats").classList.remove("hidden");
    });
}

// ุฏุงูุฉ ูุนุฑุถ ุงููุจุงุฑูุงุช
function displayYearMatches(matches) {
    const tableBody = document.getElementById("year-stats-tbody");
    tableBody.innerHTML = ""; // ุชูุธูู ูุญุชููุงุช ุงูุฌุฏูู

    matches.forEach(match => {
        const row = document.createElement("tr");
        row.innerHTML = `
            <td>${match.Index}</td>
            <td>${match.Year}</td>
            <td>${currentLanguage === "ar" ? match.Round : match.Round_en}</td>
            <td>${currentLanguage === "ar" ? match.Team1 : match.Team1_en}</td>
            <td>${currentLanguage === "ar" ? match.Team2 : match.Team2_en}</td>
            <td>${match.Score1} - ${match.Score2}</td>
            <td>${currentLanguage === "ar" ? match.Winner : match.Winner_en}</td>
        `;
        tableBody.appendChild(row); // ุฅุถุงูุฉ ุงูุตู ุฅูู ุงูุฌุฏูู
    });
}

// ุฏุงูุฉ ุชุญุฏูุซ ุงูุฅุญุตุงุฆูุงุช
function updateYearStats(matches) {
    const statsContainer = document.getElementById("year-stats");
    const totalMatches = matches.length;
    const wins = matches.filter(match => match.Winner === "ุงูููุงู").length;
    const losses = matches.filter(match => match.Winner !== "ุงูููุงู" && match.Winner !== "ุงูุชุนุงุฏู").length;
    const draws = matches.filter(match => match.Winner === "ุงูุชุนุงุฏู").length;

    statsContainer.innerHTML = `
        <div class="team-stat-card">
            <i class="fa fa-futbol"></i><h3>ุงููุจุงุฑูุงุช</h3><p>${totalMatches}</p>
        </div>
        <div class="team-stat-card">
            <i class="fa fa-trophy"></i><h3>ุงูุงูุชุตุงุฑุงุช</h3><p>${wins}</p>
        </div>
        <div class="team-stat-card">
            <i class="fa fa-times-circle"></i><h3>ุงูุฎุณุงุฆุฑ</h3><p>${losses}</p>
        </div>
        <div class="team-stat-card">
            <i class="fa fa-handshake"></i><h3>ุงูุชุนุงุฏูุงุช</h3><p>${draws}</p>
        </div>
    `;
}

// ุฏุงูุฉ ุงูููุชุฑุฉ
function filterYearMatches(filterType) {
    const selectedYear = document.getElementById("year-stats-select").value;
    if (!selectedYear) return;

    fetchDataFromSheet(SHEET_PAST_GAMES, (data) => {
        let matches = data.filter(game => game.Year === selectedYear);

        // ุชุทุจูู ุงูููุชุฑุฉ ุจูุงุกู ุนูู ุงูููุน
        if (filterType === "win") {
            matches = matches.filter(game => 
                (currentLanguage === "ar" ? game.Winner === "ุงูููุงู" : game.Winner_en === "Al-Hilal")
            );
        } else if (filterType === "loss") {
            matches = matches.filter(game => 
                (currentLanguage === "ar"
                    ? game.Winner !== "ุงูููุงู" && game.Winner !== "ุงูุชุนุงุฏู"
                    : game.Winner_en !== "Al-Hilal" && game.Winner_en !== "Draw")
            );
        } else if (filterType === "draw") {
            matches = matches.filter(game => 
                (currentLanguage === "ar" ? game.Winner === "ุงูุชุนุงุฏู" : game.Winner_en === "Draw")
            );
        }

        // ุนุฑุถ ุงูุจูุงูุงุช ุงููููุชุฑุฉ
        displayYearMatches(matches);
    });
}

//============================================================================================================================================
// ูุชุบูุฑุงุช ุฎุงุตุฉ ุจุฅุฏุงุฑุฉ ุงูุชููู ุจูู ุงูุฑุคุณุงุก
let managers = [];
let currentManagerIndex = 0;

// ุฏุงูุฉ ูุชุญ ุดุงุดุฉ ุฑุคุณุงุก ุงููุงุฏู
function openManagers() {
    const mainContent = document.getElementById("main-content");

    // ุฅูุดุงุก ุงููุงุฌูุฉ ุงูุฃุณุงุณูุฉ
    mainContent.dataset.section = "managers"; // ุชุนููู ุงููุณู ุงูุญุงูู
    mainContent.innerHTML = `
        <div id="managers-container">
            <div class="manager-card">
                <img id="manager-image" class="manager-image" src="" alt="${translations[currentLanguage].manager_image || 'ุตูุฑุฉ ุงููุฏูุฑ'}">
                <h3 id="manager-name" class="manager-name"></h3>
                <p id="manager-years" class="manager-years"></p>
                <p id="manager-wins" class="manager-wins"></p>
                <p id="manager-stats" class="manager-stats"></p>
                <div class="buttons">
                    <button onclick="prevManager()">${translations[currentLanguage].prev || 'ุงูุณุงุจู'}</button>
                    <button onclick="nextManager()">${translations[currentLanguage].next || 'ุงูุชุงูู'}</button>
                </div>
            </div>
        </div>
    `;

    // ุฌูุจ ุงูุจูุงูุงุช ูู Google Sheets ุจุงุณุชุฎุฏุงู fetchDataFromSheet
    fetchDataFromSheet("manger", (data) => {
        managers = data.map(manager => {
            return {
                ...manager,
                mangertName: currentLanguage === "ar" ? manager.mangertName : manager.mangertName_en,
                win: currentLanguage === "ar" ? manager.win : manager.win_en,
            };
        });
        currentManagerIndex = 0; // ุฅุนุงุฏุฉ ุชุนููู ุงููุคุดุฑ
        if (managers.length > 0) {
            displayManager(currentManagerIndex); // ุนุฑุถ ุฃูู ูุฏูุฑ
        } else {
            mainContent.innerHTML = `<p style="color: red;">${translations[currentLanguage].no_data || "ูุง ุชูุฌุฏ ุจูุงูุงุช ูุชุงุญุฉ ููุฑุคุณุงุก."}</p>`;
        }
    });
}

// ุฏุงูุฉ ุนุฑุถ ุงููุฏูุฑ ุจูุงุกู ุนูู ุงููุบุฉ ุงูุญุงููุฉ
function displayManager(index) {
    const manager = managers[index];

    const formattedYears = manager.years
        .split(",")
        .map(year => `<span class="highlight year">${year.trim()}</span>`)
        .join("<br>");

    const formattedWins = manager.win
        ? manager.win
              .split(",")
              .map(win => `<span class="highlight win">${win.trim()}</span>`)
              .join("<br>")
        : `<span class="no-data">${translations[currentLanguage].no_wins || "ูุง ุชูุฌุฏ ุจุทููุงุช"}</span>`;

    const totalYears = manager.years
        .split(",")
        .reduce((sum, range) => {
            const [start, end] = range.split("-").map(Number);
            return sum + (end - start + 1);
        }, 0);

    document.getElementById("managers-container").innerHTML = `
        <!-- ุงูุนููุงู -->
        <h2 class="managers-title">
            <i class="fa fa-crown icon"></i> ${translations[currentLanguage].managers_title || "ุฑุคุณุงุก ุงููุงุฏู"}
        </h2>
        
        <div class="manager-container">
            <!-- ุงูุจุทุงูุฉ ุงูุฑุฆูุณูุฉ ููุฑุฆูุณ -->
            <div class="manager-main-card">
                <div class="manager-number">#${manager.no}</div>
                <div class="manager-header">
                    <img class="manager-image" src="${manager.ImageURL}" alt="${manager.mangertName}">
                    <h3 class="manager-name">${manager.mangertName}</h3>
                </div>
            </div>

            <!-- ุงูุจุทุงูุงุช ุงูุซูุงุซ -->
            <div class="manager-stats-row">
                <div class="stat-card">
                    <i class="fa fa-calendar-alt icon"></i>
                    <h4>${translations[currentLanguage].period || "ุงููุชุฑุฉ ุงูุฒูููุฉ"}</h4>
                    <p>${formattedYears}</p>
                </div>
                <div class="stat-card">
                    <i class="fa fa-trophy icon"></i>
                    <h4>${translations[currentLanguage].trophies || "ุงูุจุทููุงุช"}</h4>
                    <p>${formattedWins}</p>
                </div>
                <div class="stat-card">
                    <i class="fa fa-chart-bar icon"></i>
                    <h4>${translations[currentLanguage].stats || "ุงูุฅุญุตุงุฆูุงุช"}</h4>
                    <p>
                        ${translations[currentLanguage].total_years || "ุฅุฌูุงูู ุงูุณููุงุช"}: <span class="highlight stat">${totalYears}</span> ${translations[currentLanguage].years || "ุณูุฉ"}<br>
                        ${translations[currentLanguage].total_trophies || "ุฅุฌูุงูู ุงูุจุทููุงุช"}: <span class="highlight stat">${manager.milestoneCount || 0}</span> ${translations[currentLanguage].trophies || "ุจุทููุฉ"}
                    </p>
                </div>
            </div>

            <!-- ุฃุฒุฑุงุฑ ุงูุชููู -->
            <div class="navigation-buttons">
                <button onclick="prevManager()">${translations[currentLanguage].prev || "ุงูุณุงุจู"}</button>
                <button onclick="nextManager()">${translations[currentLanguage].next || "ุงูุชุงูู"}</button>
            </div>
        </div>
    `;
}

// ุฏุงูุฉ ููุงูุชูุงู ุฅูู ุงููุฏูุฑ ุงูุณุงุจู
function prevManager() {
    if (currentManagerIndex > 0) {
        currentManagerIndex--;
        displayManager(currentManagerIndex);
    }
}

// ุฏุงูุฉ ููุงูุชูุงู ุฅูู ุงููุฏูุฑ ุงูุชุงูู
function nextManager() {
    if (currentManagerIndex < managers.length - 1) {
        currentManagerIndex++;
        displayManager(currentManagerIndex);
    }
}

//============================================================================================================================================
// ุนุฏุฏ ุงูููุฏูููุงุช ููู ุตูุญุฉ
const videosPerPage = 4;
let currentPage = 1;
let videos = [];

function openYouTubeVideos() {
    clearContent(); // ุชูุธูู ุงููุญุชูู ุงูุณุงุจู
    currentPage = 1; // ุฅุนุงุฏุฉ ุชุนููู ุงูุตูุญุฉ
    const mainContent = document.getElementById("main-content");
    mainContent.dataset.section = "youtube-videos"; // ุชุนููู ุงููุณู ุงูุญุงูู
    mainContent.innerHTML = `
        <h2 class="videos-title">
            <i class="fa fa-play-circle"></i> ${translations[currentLanguage].youtube_videos || "ููุงุทุน ุงูุชุชููุฌ"}
        </h2>
        <div id="youtube-videos" class="youtube-videos-grid"></div>
        <div id="pagination" class="pagination-controls"></div>
    `;

    fetchDataFromSheet("YouTubeVideos", (data) => {
        // ุงุณุชุฎุฏุงู ุงููุบุฉ ุงูุญุงููุฉ ูุนุฑุถ ุงูุจูุงูุงุช
        videos = data.map(video => ({
            title: currentLanguage === "ar" ? video.title : video["title-en"],
            videoId: video.videoId
        }));

        displayVideos(); // ุนุฑุถ ุงูููุฏูููุงุช ุจูุงุกู ุนูู ุงูุตูุญุฉ ุงูุฃููู
    });
}

// ุฏุงูุฉ ุนุฑุถ ุฃุฒุฑุงุฑ ุงูุชููู ุจูู ุงูุตูุญุงุช
function displayVideos() {
    const container = document.getElementById("youtube-videos");
    container.innerHTML = ""; // ุชูุธูู ุงูุญุงููุฉ

    const start = (currentPage - 1) * videosPerPage;
    const end = start + videosPerPage;
    const currentVideos = videos.slice(start, end);

    currentVideos.forEach(video => {
        const videoElement = document.createElement("iframe");
        videoElement.src = `https://www.youtube.com/embed/${video.videoId}`;
        videoElement.width = "100%";
        videoElement.height = "250";
        videoElement.frameBorder = "0";
        videoElement.allow = "accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture";
        videoElement.allowFullscreen = true;

        const videoTitle = document.createElement("p");
        videoTitle.classList.add("video-title");
        videoTitle.textContent = video.title || (currentLanguage === "ar" ? "ุนููุงู ุบูุฑ ูุชููุฑ" : "No Title Available");

        const videoCard = document.createElement("div");
        videoCard.classList.add("video-card");
        videoCard.appendChild(videoElement);
        videoCard.appendChild(videoTitle);

        container.appendChild(videoCard);
    });

    displayPagination();
}
function displayPagination() {
    const paginationContainer = document.getElementById("pagination");
    paginationContainer.innerHTML = "";

    const totalPages = Math.ceil(videos.length / videosPerPage);

    if (currentPage > 1) {
        const prevButton = document.createElement("button");
        prevButton.textContent = currentLanguage === "ar" ? "ุงูุณุงุจู" : "Previous";
        prevButton.className = "pagination-button";
        prevButton.onclick = () => {
            currentPage--;
            displayVideos();
        };
        paginationContainer.appendChild(prevButton);
    }

    const pageNumber = document.createElement("span");
    pageNumber.textContent = currentLanguage === "ar" 
        ? `ุงูุตูุญุฉ ${currentPage} ูู ${totalPages}` 
        : `Page ${currentPage} of ${totalPages}`;
    pageNumber.className = "page-number";
    paginationContainer.appendChild(pageNumber);

    if (currentPage < totalPages) {
        const nextButton = document.createElement("button");
        nextButton.textContent = currentLanguage === "ar" ? "ุงูุชุงูู" : "Next";
        nextButton.className = "pagination-button";
        nextButton.onclick = () => {
            currentPage++;
            displayVideos();
        };
        paginationContainer.appendChild(nextButton);
    }
}

//============================================================================================================================================
function openWorldCup() {
    const mainContent = document.getElementById("main-content");

    if (!mainContent) {
        console.error("ุงูุนูุตุฑ 'main-content' ุบูุฑ ููุฌูุฏ.");
        return;
    }

    // ุฅุนุฏุงุฏ ุงููุญุชูู ุงูุฑุฆูุณู
    mainContent.dataset.section = "world-cup"; // ุชุนููู ุงููุณู ุงูุญุงูู
    mainContent.innerHTML = `
        <h2>๐ ${translations[currentLanguage].world_cup || "ูุดุงุฑูุงุช ุงูููุงู ูู ูุฃุณ ุงูุนุงูู"}</h2>
        <div id="world-cup-main" class="world-cup-grid"></div>
    `;

    const yearsData = [
        { year: 2019, location: currentLanguage === "ar" ? "ูุทุฑ" : "Qatar", flag: "https://flagcdn.com/w40/qa.png" },
        { year: 2021, location: currentLanguage === "ar" ? "ุงูุฅูุงุฑุงุช" : "UAE", flag: "https://flagcdn.com/w40/ae.png" },
        { year: 2022, location: currentLanguage === "ar" ? "ุงููุบุฑุจ" : "Morocco", flag: "https://flagcdn.com/w40/ma.png" },
        { year: 2025, location: currentLanguage === "ar" ? "ุฃูุฑููุง" : "USA", flag: "https://flagcdn.com/w40/us.png" }
    ];

    yearsData.reverse().forEach((entry, index) => {
        const card = `
            <div class="world-cup-card">
                <div class="card-number">${yearsData.length - index}</div>
                <h3 class="cup-title">${translations[currentLanguage].world_cup || "ูุฃุณ ุงูุนุงูู"} ${entry.year}</h3>
                <div class="country-info">
                    <img src="${entry.flag}" alt="${entry.location}" class="country-flag">
                    <p class="country-name">${entry.location}</p>
                </div>
                <button class="details-button" onclick="openWorldCupDetails(${entry.year})">${translations[currentLanguage].view_details || "ุนุฑุถ ุงูุชูุงุตูู"}</button>
            </div>
        `;
        document.getElementById("world-cup-main").innerHTML += card;
    });
}

function openWorldCupDetails(year) {
    const mainContent = document.getElementById("main-content");

    fetchDataFromSheet(fifaWorldCupSheet, (data) => {
        const filteredMatches = data.filter(match => match.Year == year);

        mainContent.innerHTML = `
            <div class="details-container">
                <h2><i class="fa fa-trophy"></i> ${translations[currentLanguage].world_cup_details || "ุชูุงุตูู ูุฃุณ ุงูุนุงูู"} ${year}</h2>
                <div id="world-cup-details" class="world-cup-details-grid"></div>
                <button class="back-button" onclick="openWorldCup()">๐ ${translations[currentLanguage].back_to_world_cup || "ุงูุนูุฏุฉ ููุฃุณ ุงูุนุงูู"}</button>
            </div>
        `;

        filteredMatches.forEach(match => {
            const card = `
                <div class="match-card">
                    <h3 class="match-stage">${currentLanguage === "ar" ? match.Stage : match["Stage-en"]}</h3>
                    <div class="match-info">
                        <p><i class="fa fa-users"></i> ${translations[currentLanguage].opponent || "ุงููุฑูู ุงูููุงูุณ"}: ${currentLanguage === "ar" ? match.Opponent : match["Opponent-en"]}</p>
                        <p><i class="fa fa-calendar-alt"></i> ${translations[currentLanguage].date || "ุงูุชุงุฑูุฎ"}: ${match.MatchDate}</p>
                        <p><i class="fa fa-map-marker-alt"></i> ${translations[currentLanguage].stadium || "ุงูููุนุจ"}: ${currentLanguage === "ar" ? match.Stadium : match["Stadium-en"]}</p>
                        <p><i class="fa fa-user"></i> ${translations[currentLanguage].captain || "ุงููุงุจุชู"}: ${currentLanguage === "ar" ? match.Captain : match["Captain-en"]}</p>
                        <p><i class="fa fa-futbol"></i> ${translations[currentLanguage].result || "ุงููุชูุฌุฉ"}: ${match.GoalsFor} - ${match.GoalsAgainst}</p>
                    </div>
                    <iframe src="https://www.youtube.com/embed/${match.HighlightsLink}" class="video-frame"></iframe>
                </div>
            `;
            document.getElementById("world-cup-details").innerHTML += card;
        });
    });
}

//============================================================================================================================================
function openHilalMap() {
    const mainContent = document.getElementById("main-content");
    mainContent.dataset.section = "hilal-map"; // ุชุนููู ุงููุณู ุงูุญุงูู
    mainContent.innerHTML = `
        <h2 id="map-title" style="text-align: center; margin-bottom: 20px;">๐ ${translations[currentLanguage].hilal_map || "ููุตุงุช ุงูููุงู"}</h2>
        <div id="map-container" style="height: 500px; width: 70%; margin: 0 auto; border-radius: 15px; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); border: 3px solid #005fbf;"></div>
        <div id="regions-bar" style="
            display: flex; 
            flex-wrap: wrap; 
            justify-content: center; 
            align-items: center; 
            padding: 10px; 
            margin: 20px auto 10px; 
            background-color: #001F54; 
            border-radius: 10px; 
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            width: 70%;">
        </div>
        <button id="reset-map" style="
            display: block; 
            margin: 20px auto; 
            padding: 10px 20px; 
            background-color: #005fbf; 
            color: white; 
            border: none; 
            border-radius: 5px; 
            cursor: pointer;
            font-weight: bold;">
            <i class="fa fa-map"></i> ${translations[currentLanguage].reset_map || "ุฅุนุงุฏุฉ ุชุนููู ุงูุฎุฑูุทุฉ"}
        </button>
    `;

    // ุชุญููู ุงูุฎุฑูุทุฉ ุงูุฃุณุงุณูุฉ ุจูุงุกู ุนูู ุงููุบุฉ
    const tileLayerUrl =
        currentLanguage === "ar"
            ? "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" // ุฎุฑูุทุฉ ุจุงูุนุฑุจู
            : "https://{s}.tile.openstreetmap.fr/osmfr/{z}/{x}/{y}.png"; // ุฎุฑูุทุฉ ุจุงูุฅูุฌููุฒูุฉ

    const map = L.map('map-container').setView([24.774265, 46.738586], 6);

    // ุฅุถุงูุฉ ุทุจูุฉ ุงูุฎุฑูุทุฉ
    L.tileLayer(tileLayerUrl, {
        attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);

    const markers = L.markerClusterGroup({
        iconCreateFunction: (cluster) => {
            const count = cluster.getChildCount();
            return L.divIcon({
                html: `<div style="
                    background-color: #005fbf;
                    color: white;
                    border-radius: 50%;
                    width: 40px;
                    height: 40px;
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    font-weight: bold;
                ">${count}</div>`,
                className: 'custom-cluster-icon',
                iconSize: [40, 40],
            });
        }
    });

    const regionsBar = document.getElementById("regions-bar");

    // ุชุญููู ุงูุจูุงูุงุช ูู Google Sheets
    fetchDataFromSheet("MAPS", (data) => {
        const regions = {};

        data.forEach(row => {
            const coordinates = row.coordinates.split(',').map(coord => parseFloat(coord.trim()));
            const region = currentLanguage === "ar" ? row.Location : row["Location-en"];
            const stadium = currentLanguage === "ar" ? row.Stadium : row["Stadium-en"];
            const tournament = currentLanguage === "ar" ? row.Name : row["Name-en"];
            const year = row.Year;

            if (!regions[region]) {
                regions[region] = {
                    coordinates: coordinates,
                    stadiums: []
                };
            }

            regions[region].stadiums.push({ stadium, tournament, year, coordinates });
        });

        Object.keys(regions).forEach(region => {
            const { coordinates, stadiums } = regions[region];

            stadiums.forEach(({ stadium, tournament, year }) => {
                const popupContent = `
                    <div style="text-align: center; padding: 10px;">
                        <h3 style="margin-bottom: 10px; color: #005fbf;">${stadium}</h3>
                        <p style="font-size: 1rem; color: #005fbf;">${translations[currentLanguage].tournament || "ุงูุจุทููุฉ"}: ${tournament} (${year})</p>
                    </div>
                `;
                const marker = L.marker(coordinates, {
                    icon: L.icon({
                        iconUrl: 'https://github.com/sweettaste95/hilal-images/blob/main/png-transparent-copa-del-rey-football-cup-trophy-football-color-gold-sports11.png?raw=true',
                        iconSize: [40, 40],
                        iconAnchor: [20, 40],
                        popupAnchor: [0, -40]
                    })
                }).bindPopup(popupContent);
                markers.addLayer(marker);
            });

            const regionItem = document.createElement("div");
            regionItem.style = `
                display: inline-flex; 
                align-items: center; 
                margin: 5px 10px;
                padding: 10px;
                background-color: #005fbf;
                color: white;
                border-radius: 5px;
                font-weight: bold;
                cursor: pointer;
                transition: transform 0.3s ease;
            `;
            regionItem.innerHTML = `
                <span style="margin-right: 5px;">๐</span>
                <span>${region}</span>
                <span style="background-color:#52159e; color: white; padding: 5px 10px; margin-left: 10px; border-radius: 5px;">
                    ${stadiums.length}
                </span>
            `;
            regionItem.addEventListener("click", () => {
                map.setView(coordinates, 10);
            });
            regionItem.addEventListener("mouseover", () => {
                regionItem.style.transform = "scale(1.1)";
            });
            regionItem.addEventListener("mouseout", () => {
                regionItem.style.transform = "scale(1)";
            });

            regionsBar.appendChild(regionItem);
        });

        map.addLayer(markers);

        document.getElementById('reset-map').addEventListener('click', () => {
            map.setView([24.774265, 46.738586], 6);
        });

        setTimeout(() => {
            map.invalidateSize();
        }, 200);
    });
}

//============================================================================================================================================

let timelineData = "";

// ุฅุนุฏุงุฏ ุงูุดุฑูุท ุงูุฒููู
fetchDataFromSheet("today-event", (todayEvents) => {
    const currentMonth = new Date().getMonth() + 1;
    const currentMonthEvents = todayEvents.filter(event => {
        const eventDateParts = event.date.split("/");
        const eventMonth = parseInt(eventDateParts[1]);
        return eventMonth === currentMonth;
    });

    // 1. ุฑุงุจุท ุงูุชููุฌุฑุงู
    timelineData += `
        <span style="display: inline-block; margin-right: 50px;">
            <a href="https://t.me/AlHilalFansChannel" target="_blank"
                style="color: #fff; text-decoration: none; font-weight: bold;">
                ๐ฑ ุงุดุชุฑู ูู ููุงุฉ ุชูููุฌุฑุงู ููุญุตูู ุนูู ูู ุฌุฏูุฏ
            </a>
        </span>
    `;

    // 2. ุขุฎุฑ ูุจุงุฑุงุฉ
    fetchDataFromSheet("pastGames", (pastGames) => {
        if (pastGames.length > 0) {
            const lastGame = pastGames[pastGames.length - 1];
            timelineData += `
                <span style="display: inline-block; margin-right: 50px;">
                    โฝ <span style="color:#FFA500; font-weight:bold;">ุขุฎุฑ ูุจุงุฑุงุฉ:</span>
                    <span style="color:#fff; font-weight:bold;">${lastGame.Team1}</span>
                    <span style="color:#FFD700; font-weight:bold;">(${lastGame.Score1}-${lastGame.Score2})</span>
                    <span style="color:#fff; font-weight:bold;">${lastGame.Team2}</span>
                </span>
            `;
        } else {
            timelineData += `
                <span style="display: inline-block; margin-right: 50px;">
                    โฝ <span style="color:#FFA500; font-weight:bold;">ุขุฎุฑ ูุจุงุฑุงุฉ:</span>
                    <span style="color:#fff;">ูุง ุชูุฌุฏ ูุจุงุฑูุงุช ูุณุฌูุฉ</span>
                </span>
            `;
        }

        // 3. ุจุทููุงุช ูุฐุง ุงูุดูุฑ
        if (currentMonthEvents.length > 0) {
            const eventsText = currentMonthEvents.map(event => `
                ๐ <span style="color:#FFD700; font-weight:bold;">${event.title}</span>
                (<span style="color:#fff;">${event.year}</span>)
            `).join(" | ");
            timelineData += `
                <span style="display: inline-block; margin-right: 50px;">
                    ๐ <span style="color:#FFA500; font-weight:bold;">ุจุทููุงุช ูุฐุง ุงูุดูุฑ:</span> ${eventsText}
                </span>
            `;
        } else {
            timelineData += `
                <span style="display: inline-block; margin-right: 50px;">
                    ๐ <span style="color:#FFA500; font-weight:bold;">ุจุทููุงุช ูุฐุง ุงูุดูุฑ:</span>
                    <span style="color:#fff;">ูุง ุชูุฌุฏ ุจุทููุงุช ููุฐุง ุงูุดูุฑ</span>
                </span>
            `;
        }

        // ุชุญุฏูุซ ุงูุดุฑูุท ุงูุฒููู
        const timelineContainer = document.getElementById("timeline-container");
        timelineContainer.innerHTML = timelineData;
        timelineContainer.style.display = "block";
    });
});

// ุฅุถุงูุฉ ุงูุดุฑูุท ุฅูู DOM
document.addEventListener("DOMContentLoaded", () => {
    const header = document.querySelector("header");
    const timeline = document.createElement("div");
    timeline.id = "timeline-container";
    timeline.style = `
      display: fixed; 
       top: 50px;
        left: 0;
        width: 100%;
        color: white;
        font-size: 1.2rem; /* ุชูุจูุฑ ุงููุต */
        padding: 10px;
        white-space: nowrap;
        overflow: auto;
        animation: scroll 50s linear infinite; /* ุชูููู ุงูุณุฑุนุฉ */
    `;
    timeline.innerHTML = "ุฌุงุฑู ุชุญููู ุงูุจูุงูุงุช...";
    header.insertAdjacentElement("afterend", timeline);
});

// ุญุฑูุฉ ุงูุดุฑูุท
const style = document.createElement("style");
style.innerHTML = `
    @keyframes scroll {
        0% { transform: translateX(100%); }
        100% { transform: translateX(-100%); }
    }
    #timeline-container a:hover {
        text-decoration: underline;
    }
    #timeline-container span {
        font-size: 1rem;
        font-weight: bold;
        white-space: nowrap; /* ููุน ุงูุงูุชูุงู */
    }
    #timeline-container span > span {
        margin: 0 5px; /* ุฅุถุงูุฉ ูุณุงูุงุช ุจูู ุงูุนูุงุตุฑ ุฏุงุฎู ุงููุต */
    }
`;
document.head.appendChild(style);
function openContent(section) {
    const mainContent = document.getElementById("main-content");

    // ุชุนููู ุงููุณู ุงูุญุงูู ูู dataset
    mainContent.dataset.section = section;

    // ูุณุญ ุงููุญุชูู ุงูุณุงุจู
    clearContent();

    // ุนุฑุถ ุณูุงุณุฉ ุงูุฎุตูุตูุฉ ุจูุงุกู ุนูู ุงููุบุฉ ุงูุญุงููุฉ
    if (section === "privacy-policy") {
        mainContent.innerHTML = `
            <div class="privacy-container">
                <h1>${translations[currentLanguage]?.privacy_policy || "ุณูุงุณุฉ ุงูุฎุตูุตูุฉ"}</h1>
                <p>${translations[currentLanguage]?.privacy_welcome || "ูุฑุญุจูุง ุจูู ูู ุชุทุจูู \"ุจุทููุงุช ุงูููุงู\". ูุฐุง ุงูุชุทุจูู ุชู ุชุทููุฑู ุจุงุฌุชูุงุฏ ุดุฎุตู ูููุฏู ุฅูู ุฌูุน ูุนูููุงุช ุญูู ุชุงุฑูุฎ ูุฅูุฌุงุฒุงุช ูุงุฏู ุงูููุงู ุจุดูู ุดุงูู ููููุฏ ููุฌูููุฑ."}</p>
                
                <h2>${translations[currentLanguage]?.independence_statement || "ุจูุงู ุงูุงุณุชููุงููุฉ"}</h2>
                <p>${translations[currentLanguage]?.independence_content || "ูุฐุง ุงูุชุทุจูู ุบูุฑ ุชุงุจุน ุฃู ูุฏุนูู ูู ูุจู ูุงุฏู ุงูููุงู ุงูุฑุณูู ุฃู ุฃู ุฌูุฉ ุฑุณููุฉ ุฃุฎุฑู. ุฌููุน ุงูุฌููุฏ ุงููุจุฐููุฉ ููุง ุดุฎุตูุฉ ููุณุชููุฉ."}</p>
                
                <h2>${translations[currentLanguage]?.content_sources || "ูุตุงุฏุฑ ุงููุญุชูู"}</h2>
                <p>${translations[currentLanguage]?.sources_content || "ุชู ุฌูุน ุฌููุน ุงูุจูุงูุงุช ูุงููุนูููุงุช ูู ูุตุงุฏุฑ ุนุงูุฉ ููุซููุฉ ูุซู ุงูุฅูุชุฑูุช. ููุงุทุน ุงูููุฏูู ุงููุนุฑูุถุฉ ูู ูุตุงุฏุฑูุง ุงูุฃุตููุฉ (ูุซู ูููุงุช ุงูููุชููุจ) ููู ูุชู ุชุนุฏูููุง. ุฅุฐุง ููุช ูุงูููุง ูุฃู ูุญุชูู ูุชุฑุบุจ ูู ุฅุฒุงูุชูุ ูุฑุฌู ุงูุชูุงุตู ูุนูุง."}</p>
                
                <h2>${translations[currentLanguage]?.copyright || "ุญููู ุงููุดุฑ"}</h2>
                <p>${translations[currentLanguage]?.copyright_content || "ุฌููุน ุญููู ุงูููููุฉ ุงูููุฑูุฉ ููุชุทุจูู ูุญููุธุฉ. ูููุน ูุณุฎ ุฃู ุชุนุฏูู ุฃู ุงุณุชุฎุฏุงู ุงูุชุทุจูู ูุฃุบุฑุงุถ ุชุฌุงุฑูุฉ ุฏูู ุฅุฐู ูุณุจู."}</p>
                
                <h2>${translations[currentLanguage]?.data_policy || "ุณูุงุณุฉ ุงูุจูุงูุงุช"}</h2>
                <p>${translations[currentLanguage]?.data_policy_content || "ูุญู ูุง ูุฌูุน ุฃู ูุดุงุฑู ุจูุงูุงุช ุงููุณุชุฎุฏููู ูุน ุฃุทุฑุงู ุซุงูุซุฉ. ุฅุฐุง ููุช ุจุงูุชุณุฌูู ูู ุงูุชุทุจููุ ุณูุชู ุงุณุชุฎุฏุงู ุจูุงูุงุชู ููุท ูุชุญุณูู ุชุฌุฑุจุฉ ุงูุงุณุชุฎุฏุงู."}</p>
                
                <h2>${translations[currentLanguage]?.contact_us || "ุชูุงุตู ูุนูุง"}</h2>
                <p>${translations[currentLanguage]?.contact_content || "ุฅุฐุง ูุงู ูุฏูู ุฃู ุงุณุชูุณุงุฑุงุช ุฃู ุงุนุชุฑุงุถุงุชุ ููููู ุงูุชูุงุตู ูุนูุง ุนุจุฑ ุงูุจุฑูุฏ ุงูุชุงูู:"}</p>
            </div>
        `;

        mainContent.style.display = "block"; 
    } else {
        mainContent.innerHTML = `<p>${translations[currentLanguage]?.error_message || "ุงููุณู ุบูุฑ ูุนุฑูู."}</p>`;
    }
}
